   	drop table APPOINTMENT if exists;
    drop table AUTO_USER if exists;
    drop table SERVICES if exists;
    
    drop table users if exists;
    drop table authorities if exists;
    	
	drop table groups if exists;
	drop table group_authorities if exists;
	drop table group_members if exists;
    
    -- default user and authorities tables given by spring security jdbc user details service
    create table users(
		username varchar_ignorecase(50) not null primary key,
		password varchar_ignorecase(50) not null,
		enabled boolean not null
	);

	create table authorities (
		username varchar_ignorecase(50) not null,
		authority varchar_ignorecase(50) not null,
		constraint fk_authorities_users foreign key(username) references users(username)
	);
	create unique index ix_auth_username on authorities (username, authority);
	
	-- default groups tables given by spring security jdbc user details service for group authorities and users
	create table groups (
		id bigint generated by default as identity(start with 0) primary key,
		group_name varchar_ignorecase(50) not null
	);
	
	create table group_authorities (
		group_id bigint not null,
		authority varchar(50) not null,
		constraint fk_group_authorities_group foreign key(group_id) references groups(id)
	);
			
	create table group_members (
		id bigint generated by default as identity(start with 0) primary key,
		username varchar(50) not null,
		group_id bigint not null,
		constraint fk_group_members_group foreign key(group_id) references groups(id)
	);

	-- application tables
    create table APPOINTMENT (
        APPOINTMENT_ID bigint generated by default as identity,
        APPOINTMENT_DT timestamp,
        MAKE varchar(255),
        MODEL varchar(255),
        YEAR smallint,
        USER_ID bigint,
        STATUS varchar(255),
        primary key (APPOINTMENT_ID)
    );

    create table AUTO_USER (
        autoUserId bigint generated by default as identity,
        EMAIL varchar(255),
        FIRST_NAME varchar(255),
        LAST_NAME varchar(255),
        PASSWORD varchar(255),
        USERNAME varchar(255),
        ROLE varchar(255),
        primary key (autoUserId)
    );

    create table SERVICES (
        APPOINTMENT_ID bigint not null,
        NAME varchar(255)
    );

    alter table APPOINTMENT 
        add constraint FK_hjr0wl1nbp09iulymmarqjj08 
        foreign key (USER_ID) 
        references AUTO_USER;

    alter table SERVICES 
        add constraint FK_e1e9lupq7o7mwsgtbkwd6uivn 
        foreign key (APPOINTMENT_ID) 
        references APPOINTMENT;


insert into AUTO_USER (autoUserId, EMAIL, FIRST_NAME, LAST_NAME, PASSWORD, USERNAME, ROLE) values (null, 'Ivan.m.Garcia@gmail.com', 'Ivan', 'Garcia', 'password', 'ivgarcia', 'ROLE_ADMIN');
insert into AUTO_USER (autoUserId, EMAIL, FIRST_NAME, LAST_NAME, PASSWORD, USERNAME, ROLE) values (null, 'johndoe@gmail.com', 'John', 'Doe', 'password', 'jodoe', 'ROLE_USER');
insert into AUTO_USER (autoUserId, EMAIL, FIRST_NAME, LAST_NAME, PASSWORD, USERNAME, ROLE) values (null, 'janedoe@gmail.com', 'Jane', 'Doe', 'password', 'jadoe', 'ROLE_USER');
insert into AUTO_USER (autoUserId, EMAIL, FIRST_NAME, LAST_NAME, PASSWORD, USERNAME, ROLE) values (null, 'juniordoe@gmail.com', 'Junior', 'Doe', 'password', 'jrdoe', 'ROLE_USER');

insert into APPOINTMENT (APPOINTMENT_ID, APPOINTMENT_DT, MAKE, MODEL, YEAR, USER_ID, STATUS) values (1,'2015-08-12 00:00:00', 'Subaru', 'Impreza', '2015', 1, 'Initial');
insert into APPOINTMENT (APPOINTMENT_ID, APPOINTMENT_DT, MAKE, MODEL, YEAR, USER_ID, STATUS) values (2,'2015-08-12 00:00:00', 'Subaru', 'Legacy', '2015', 2, 'Initial');

insert into SERVICES (APPOINTMENT_ID, NAME)  values (1, 'Oil Change');
insert into SERVICES (APPOINTMENT_ID, NAME)  values (1, 'Tire Change');
insert into SERVICES (APPOINTMENT_ID, NAME)  values (2, 'Antifreeze Change');
insert into SERVICES (APPOINTMENT_ID, NAME)  values (2, 'Bulb Change');

insert into users(username, password, enabled) values ('pau', 'pau', true);
insert into users(username, password, enabled) values ('ilse', 'ilse', true);
-- insert into authorities(username, authority) values ('pau', 'ROLE_ADMIN');

insert into groups(id, group_name) values(1, 'Admins');

insert into group_authorities(group_id, authority) values(1, 'ROLE_USER');
insert into group_authorities(group_id, authority) values(1, 'ROLE_ADMIN');

insert into group_members(id, username, group_id) values(1, 'pau', 1);
insert into group_members(id, username, group_id) values(2, 'ilse', 1);


